// <auto-generated />
using System;
using Back_Atletica.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Back_Atletica.Migrations
{
    [DbContext(typeof(AtleticaContext))]
    partial class AtleticaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Back_Atletica.Models.AgendaTreino", b =>
                {
                    b.Property<int>("AgendaTreinoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AtleticaModalidadeId")
                        .HasColumnType("integer");

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("HoraInicio")
                        .HasColumnType("interval");

                    b.HasKey("AgendaTreinoId");

                    b.HasIndex("AtleticaModalidadeId");

                    b.ToTable("AgendaTreinos");
                });

            modelBuilder.Entity("Back_Atletica.Models.Atleta", b =>
                {
                    b.Property<int>("AtletaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("PessoaId")
                        .HasColumnType("integer");

                    b.HasKey("AtletaId");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Atletas");
                });

            modelBuilder.Entity("Back_Atletica.Models.AtletaAtleticaModalidade", b =>
                {
                    b.Property<int>("AtletaAtleticaModalidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("AtletaId")
                        .HasColumnType("integer");

                    b.Property<int>("AtleticaModalidadeId")
                        .HasColumnType("integer");

                    b.HasKey("AtletaAtleticaModalidadeId");

                    b.HasIndex("AtletaId");

                    b.HasIndex("AtleticaModalidadeId");

                    b.ToTable("AtletaAtleticaModalidades");
                });

            modelBuilder.Entity("Back_Atletica.Models.AtletaAtleticaModalidadeTimeEscalado", b =>
                {
                    b.Property<int>("AtletaAtleticaModalidadeTimeEscaladoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AtletaAtleticaModalidadeId")
                        .HasColumnType("integer");

                    b.Property<int?>("FuncaoId")
                        .HasColumnType("integer");

                    b.Property<int?>("Infracoes")
                        .HasColumnType("integer");

                    b.Property<int?>("Numero")
                        .HasColumnType("integer");

                    b.Property<int?>("Pontos")
                        .HasColumnType("integer");

                    b.Property<int>("TimeEscaladoId")
                        .HasColumnType("integer");

                    b.HasKey("AtletaAtleticaModalidadeTimeEscaladoId");

                    b.HasIndex("AtletaAtleticaModalidadeId");

                    b.HasIndex("FuncaoId");

                    b.HasIndex("TimeEscaladoId");

                    b.ToTable("AtletaAtleticaModalidadeTimesEscalados");
                });

            modelBuilder.Entity("Back_Atletica.Models.Atletica", b =>
                {
                    b.Property<int>("AtleticaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CampusId")
                        .HasColumnType("integer");

                    b.Property<string>("Descricao")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(254)")
                        .HasMaxLength(254);

                    b.Property<string>("LinkProsel")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Telefone")
                        .HasColumnType("character varying(17)")
                        .HasMaxLength(17);

                    b.HasKey("AtleticaId");

                    b.HasIndex("CampusId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PIN")
                        .IsUnique();

                    b.ToTable("Atleticas");
                });

            modelBuilder.Entity("Back_Atletica.Models.AtleticaCurso", b =>
                {
                    b.Property<int>("AtleticaCursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AtleticaId")
                        .HasColumnType("integer");

                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.HasKey("AtleticaCursoId");

                    b.HasIndex("AtleticaId");

                    b.HasIndex("CursoId");

                    b.ToTable("AtleticaCursos");
                });

            modelBuilder.Entity("Back_Atletica.Models.AtleticaModalidade", b =>
                {
                    b.Property<int>("AtleticaModalidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("AtleticaId")
                        .HasColumnType("integer");

                    b.Property<int?>("ImagemId")
                        .HasColumnType("integer");

                    b.Property<int?>("MembroId")
                        .HasColumnType("integer");

                    b.Property<int>("ModalidadeId")
                        .HasColumnType("integer");

                    b.Property<int?>("PosicaoRanking")
                        .HasColumnType("integer");

                    b.HasKey("AtleticaModalidadeId");

                    b.HasIndex("AtleticaId");

                    b.HasIndex("ImagemId")
                        .IsUnique();

                    b.HasIndex("MembroId");

                    b.HasIndex("ModalidadeId");

                    b.ToTable("AtleticaModalidades");
                });

            modelBuilder.Entity("Back_Atletica.Models.AtleticaModalidadeJogo", b =>
                {
                    b.Property<int>("AtleticaModalidadeJogoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AtleticaModalidadeId")
                        .HasColumnType("integer");

                    b.Property<int>("JogoId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Vencedor")
                        .HasColumnType("boolean");

                    b.HasKey("AtleticaModalidadeJogoId");

                    b.HasIndex("AtleticaModalidadeId");

                    b.HasIndex("JogoId");

                    b.ToTable("AtleticaModalidadeJogos");
                });

            modelBuilder.Entity("Back_Atletica.Models.Campus", b =>
                {
                    b.Property<int>("CampusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Complemento")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<int>("FaculdadeId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.HasKey("CampusId");

                    b.HasIndex("FaculdadeId");

                    b.ToTable("Campus");
                });

            modelBuilder.Entity("Back_Atletica.Models.Curso", b =>
                {
                    b.Property<int>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.HasKey("CursoId");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("Back_Atletica.Models.Evento", b =>
                {
                    b.Property<int>("EventoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AtleticaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("EventoCategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<double?>("PrecoIngresso")
                        .HasColumnType("double precision");

                    b.HasKey("EventoId");

                    b.HasIndex("AtleticaId");

                    b.HasIndex("EventoCategoriaId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("Back_Atletica.Models.EventoCategoria", b =>
                {
                    b.Property<int>("EventoCategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Cor")
                        .HasColumnType("CHAR(7)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.HasKey("EventoCategoriaId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("EventoCategorias");
                });

            modelBuilder.Entity("Back_Atletica.Models.Faculdade", b =>
                {
                    b.Property<int>("FaculdadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.HasKey("FaculdadeId");

                    b.ToTable("Faculdades");
                });

            modelBuilder.Entity("Back_Atletica.Models.Funcao", b =>
                {
                    b.Property<int>("FuncaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("FuncaoId");

                    b.ToTable("Funcoes");
                });

            modelBuilder.Entity("Back_Atletica.Models.Imagem", b =>
                {
                    b.Property<int>("ImagemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Extensao")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("ImagemId");

                    b.ToTable("Imagens");
                });

            modelBuilder.Entity("Back_Atletica.Models.ImagemAtletica", b =>
                {
                    b.Property<int>("ImagemAtleticaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AtleticaId")
                        .HasColumnType("integer");

                    b.Property<int>("ImagemId")
                        .HasColumnType("integer");

                    b.Property<char>("Tipo")
                        .HasColumnType("character(1)");

                    b.HasKey("ImagemAtleticaId");

                    b.HasIndex("AtleticaId");

                    b.HasIndex("ImagemId")
                        .IsUnique();

                    b.ToTable("ImagemAtleticas");
                });

            modelBuilder.Entity("Back_Atletica.Models.Jogo", b =>
                {
                    b.Property<int>("JogoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("JogoCategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.HasKey("JogoId");

                    b.HasIndex("JogoCategoriaId");

                    b.ToTable("Jogos");
                });

            modelBuilder.Entity("Back_Atletica.Models.JogoCategoria", b =>
                {
                    b.Property<int>("JogoCategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Cor")
                        .HasColumnType("CHAR(7)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.HasKey("JogoCategoriaId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("JogoCategorias");
                });

            modelBuilder.Entity("Back_Atletica.Models.Membro", b =>
                {
                    b.Property<int>("MembroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ImagemId")
                        .HasColumnType("integer");

                    b.Property<int>("PessoaId")
                        .HasColumnType("integer");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("MembroId");

                    b.HasIndex("ImagemId")
                        .IsUnique();

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Membros");
                });

            modelBuilder.Entity("Back_Atletica.Models.Modalidade", b =>
                {
                    b.Property<int>("ModalidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.HasKey("ModalidadeId");

                    b.ToTable("Modalidades");
                });

            modelBuilder.Entity("Back_Atletica.Models.Pessoa", b =>
                {
                    b.Property<int>("PessoaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("AnoEntradaFacul")
                        .HasColumnType("date");

                    b.Property<int>("AtleticaId")
                        .HasColumnType("integer");

                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(254)")
                        .HasMaxLength(254);

                    b.Property<char>("Genero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character(1)")
                        .HasDefaultValue('I');

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Whatsapp")
                        .HasColumnType("character varying(17)")
                        .HasMaxLength(17);

                    b.HasKey("PessoaId");

                    b.HasIndex("AtleticaId");

                    b.HasIndex("CursoId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Pessoas");
                });

            modelBuilder.Entity("Back_Atletica.Models.Produto", b =>
                {
                    b.Property<int>("ProdutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AtleticaId")
                        .HasColumnType("integer");

                    b.Property<string>("Descricao")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<bool>("Estoque")
                        .HasColumnType("boolean");

                    b.Property<int>("ImagemId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<double>("Preco")
                        .HasColumnType("double precision");

                    b.Property<int>("ProdutoCategoriaId")
                        .HasColumnType("integer");

                    b.HasKey("ProdutoId");

                    b.HasIndex("AtleticaId");

                    b.HasIndex("ImagemId")
                        .IsUnique();

                    b.HasIndex("ProdutoCategoriaId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Back_Atletica.Models.ProdutoCategoria", b =>
                {
                    b.Property<int>("ProdutoCategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.HasKey("ProdutoCategoriaId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("ProdutoCategorias");
                });

            modelBuilder.Entity("Back_Atletica.Models.Publicacao", b =>
                {
                    b.Property<int>("PublicacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AtleticaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("ImagemId")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.HasKey("PublicacaoId");

                    b.HasIndex("AtleticaId");

                    b.HasIndex("ImagemId")
                        .IsUnique();

                    b.ToTable("Publicacoes");
                });

            modelBuilder.Entity("Back_Atletica.Models.SolicitacaoAtleta", b =>
                {
                    b.Property<int>("SolicitacaoAtletaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("AnoEntradaFacul")
                        .HasColumnType("date");

                    b.Property<bool>("Aprovado")
                        .HasColumnType("boolean");

                    b.Property<int>("AtleticaId")
                        .HasColumnType("integer");

                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(254)")
                        .HasMaxLength(254);

                    b.Property<char>("Genero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character(1)")
                        .HasDefaultValue('I');

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("WhatsApp")
                        .HasColumnType("character varying(17)")
                        .HasMaxLength(17);

                    b.HasKey("SolicitacaoAtletaId");

                    b.HasIndex("AtleticaId");

                    b.HasIndex("CursoId");

                    b.ToTable("SolicitacaoAtletas");
                });

            modelBuilder.Entity("Back_Atletica.Models.SolicitacaoAtletaModalidade", b =>
                {
                    b.Property<int>("SolicitacaoAtletaModalidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ModalidadeId")
                        .HasColumnType("integer");

                    b.Property<int>("SolicitacaoAtletaId")
                        .HasColumnType("integer");

                    b.HasKey("SolicitacaoAtletaModalidadeId");

                    b.HasIndex("ModalidadeId");

                    b.HasIndex("SolicitacaoAtletaId");

                    b.ToTable("SolicitacaoAtletaModalidades");
                });

            modelBuilder.Entity("Back_Atletica.Models.SolicitacaoJogo", b =>
                {
                    b.Property<int>("SolicitacaoJogoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Aprovado")
                        .HasColumnType("boolean");

                    b.Property<int>("AtleticaAdversariaId")
                        .HasColumnType("integer");

                    b.Property<int>("AtleticaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("JogoCategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<int>("ModalidadeId")
                        .HasColumnType("integer");

                    b.HasKey("SolicitacaoJogoId");

                    b.HasIndex("AtleticaAdversariaId");

                    b.HasIndex("AtleticaId");

                    b.HasIndex("JogoCategoriaId");

                    b.HasIndex("ModalidadeId");

                    b.ToTable("SolicitacaoJogos");
                });

            modelBuilder.Entity("Back_Atletica.Models.TimeEscalado", b =>
                {
                    b.Property<int>("TimeEscaladoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AtleticaId")
                        .HasColumnType("integer");

                    b.Property<int>("JogoId")
                        .HasColumnType("integer");

                    b.HasKey("TimeEscaladoId");

                    b.HasIndex("AtleticaId");

                    b.HasIndex("JogoId");

                    b.ToTable("TimeEscalados");
                });

            modelBuilder.Entity("Back_Atletica.Models.AgendaTreino", b =>
                {
                    b.HasOne("Back_Atletica.Models.AtleticaModalidade", "AtleticaModalidade")
                        .WithMany("AgendaTreinos")
                        .HasForeignKey("AtleticaModalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.Atleta", b =>
                {
                    b.HasOne("Back_Atletica.Models.Pessoa", "Pessoa")
                        .WithOne("Atleta")
                        .HasForeignKey("Back_Atletica.Models.Atleta", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.AtletaAtleticaModalidade", b =>
                {
                    b.HasOne("Back_Atletica.Models.Atleta", "Atleta")
                        .WithMany("AtletaAtleticaModalidades")
                        .HasForeignKey("AtletaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.AtleticaModalidade", "AtleticaModalidade")
                        .WithMany("AtletaAtleticaModalidades")
                        .HasForeignKey("AtleticaModalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.AtletaAtleticaModalidadeTimeEscalado", b =>
                {
                    b.HasOne("Back_Atletica.Models.AtletaAtleticaModalidade", "AtletaAtleticaModalidade")
                        .WithMany("AtletaAtleticaModalidadeTimeEscalados")
                        .HasForeignKey("AtletaAtleticaModalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.Funcao", "Funcao")
                        .WithMany("AtletaAtleticaModalidadeTimeEscalados")
                        .HasForeignKey("FuncaoId");

                    b.HasOne("Back_Atletica.Models.TimeEscalado", "TimeEscalado")
                        .WithMany("AtletaAtleticaModalidadeTimeEscalados")
                        .HasForeignKey("TimeEscaladoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.Atletica", b =>
                {
                    b.HasOne("Back_Atletica.Models.Campus", "Campus")
                        .WithMany("Atleticas")
                        .HasForeignKey("CampusId");
                });

            modelBuilder.Entity("Back_Atletica.Models.AtleticaCurso", b =>
                {
                    b.HasOne("Back_Atletica.Models.Atletica", "Atletica")
                        .WithMany("AtleticaCursos")
                        .HasForeignKey("AtleticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.Curso", "Curso")
                        .WithMany("AtleticaCursos")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.AtleticaModalidade", b =>
                {
                    b.HasOne("Back_Atletica.Models.Atletica", "Atletica")
                        .WithMany("AtleticaModalidades")
                        .HasForeignKey("AtleticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.Imagem", "Imagem")
                        .WithOne("AtleticaModalidade")
                        .HasForeignKey("Back_Atletica.Models.AtleticaModalidade", "ImagemId");

                    b.HasOne("Back_Atletica.Models.Membro", "Membro")
                        .WithMany("AtleticaModalidades")
                        .HasForeignKey("MembroId");

                    b.HasOne("Back_Atletica.Models.Modalidade", "Modalidade")
                        .WithMany("AtleticaModalidades")
                        .HasForeignKey("ModalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.AtleticaModalidadeJogo", b =>
                {
                    b.HasOne("Back_Atletica.Models.AtleticaModalidade", "AtleticaModalidade")
                        .WithMany("AtleticaModalidadeJogos")
                        .HasForeignKey("AtleticaModalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.Jogo", "Jogo")
                        .WithMany("AtleticaModalidadeJogos")
                        .HasForeignKey("JogoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.Campus", b =>
                {
                    b.HasOne("Back_Atletica.Models.Faculdade", "Faculdade")
                        .WithMany("Campus")
                        .HasForeignKey("FaculdadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.Evento", b =>
                {
                    b.HasOne("Back_Atletica.Models.Atletica", "Atletica")
                        .WithMany("Eventos")
                        .HasForeignKey("AtleticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.EventoCategoria", "EventoCategoria")
                        .WithMany("Eventos")
                        .HasForeignKey("EventoCategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.ImagemAtletica", b =>
                {
                    b.HasOne("Back_Atletica.Models.Atletica", "Atletica")
                        .WithMany("ImagemAtleticas")
                        .HasForeignKey("AtleticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.Imagem", "Imagem")
                        .WithOne("ImagemAtletica")
                        .HasForeignKey("Back_Atletica.Models.ImagemAtletica", "ImagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.Jogo", b =>
                {
                    b.HasOne("Back_Atletica.Models.JogoCategoria", "JogoCategoria")
                        .WithMany("Jogos")
                        .HasForeignKey("JogoCategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.Membro", b =>
                {
                    b.HasOne("Back_Atletica.Models.Imagem", "Imagem")
                        .WithOne("Membro")
                        .HasForeignKey("Back_Atletica.Models.Membro", "ImagemId");

                    b.HasOne("Back_Atletica.Models.Pessoa", "Pessoa")
                        .WithOne("Membro")
                        .HasForeignKey("Back_Atletica.Models.Membro", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.Pessoa", b =>
                {
                    b.HasOne("Back_Atletica.Models.Atletica", "Atletica")
                        .WithMany("Pessoas")
                        .HasForeignKey("AtleticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.Curso", "Curso")
                        .WithMany("Pessoas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.Produto", b =>
                {
                    b.HasOne("Back_Atletica.Models.Atletica", "Atletica")
                        .WithMany("Produtos")
                        .HasForeignKey("AtleticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.Imagem", "Imagem")
                        .WithOne("Produto")
                        .HasForeignKey("Back_Atletica.Models.Produto", "ImagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.ProdutoCategoria", "ProdutoCategoria")
                        .WithMany("Produtos")
                        .HasForeignKey("ProdutoCategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.Publicacao", b =>
                {
                    b.HasOne("Back_Atletica.Models.Atletica", "Atletica")
                        .WithMany("Publicacoes")
                        .HasForeignKey("AtleticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.Imagem", "Imagem")
                        .WithOne("Publicacao")
                        .HasForeignKey("Back_Atletica.Models.Publicacao", "ImagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.SolicitacaoAtleta", b =>
                {
                    b.HasOne("Back_Atletica.Models.Atletica", "Atletica")
                        .WithMany("SolicitacaoAtletas")
                        .HasForeignKey("AtleticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.Curso", "Curso")
                        .WithMany("SolicitacaoAtletas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.SolicitacaoAtletaModalidade", b =>
                {
                    b.HasOne("Back_Atletica.Models.Modalidade", "Modalidade")
                        .WithMany("SolicitacaoAtletaModalidades")
                        .HasForeignKey("ModalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.SolicitacaoAtleta", "SolicitacaoAtleta")
                        .WithMany("SolicitacaoAtletaModalidades")
                        .HasForeignKey("SolicitacaoAtletaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.SolicitacaoJogo", b =>
                {
                    b.HasOne("Back_Atletica.Models.Atletica", "AtleticaAdversaria")
                        .WithMany()
                        .HasForeignKey("AtleticaAdversariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.Atletica", "Atletica")
                        .WithMany("SolicitacaoJogos")
                        .HasForeignKey("AtleticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.JogoCategoria", "JogoCategoria")
                        .WithMany("SolicitacaoJogos")
                        .HasForeignKey("JogoCategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.Modalidade", "Modalidade")
                        .WithMany("SolicitacaoJogos")
                        .HasForeignKey("ModalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_Atletica.Models.TimeEscalado", b =>
                {
                    b.HasOne("Back_Atletica.Models.Atletica", "Atletica")
                        .WithMany("TimeEscalados")
                        .HasForeignKey("AtleticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_Atletica.Models.Jogo", "Jogos")
                        .WithMany("TimeEscalados")
                        .HasForeignKey("JogoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
